#+TITLE: Emacs Configuration
#+AUTHOR: Romain Basseville
#+EMAIL: romain.basseville@gmail.com

* Package management
** Configure =use-package=
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)

  (require 'use-package)
#+END_SRC

** Compile packages and use newer
#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC
** Auto update packages
Packages will be updated every 4 days, and the old packages will be removed.
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
     :config
     (setq auto-package-update-delete-old-versions t
	   auto-package-update-interval 4)
     (auto-package-update-maybe))
#+END_SRC
* Personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Romain Basseville"
        user-mail-address "romain.basseville@gmail.com"
        )
#+END_SRC

* Org
** Use org and set agenda files
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-agenda-files
	  (quote
	   ("~/Dropbox/Orgzly/work.org"
	    "~/Dropbox/Orgzly/explore.org"
	    "~/Dropbox/Orgzly/perso.org"
	    "~/Dropbox/Orgzly/geek.org"
	    "~/Dropbox/Orgzly/finance.org"))))

#+END_SRC
** Pomodoro
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :after org)
#+END_SRC

** Make today's agenda the startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (org-agenda-list 1)
  (delete-other-windows)
#+END_SRC
* Theme
Solarized dark theme
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :config 
    (load-theme 'solarized-dark t))
#+END_SRC

** Remove bars
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (setq ns-auto-hide-menu-bar t)
#+END_SRC

** Babel code block
Source code block syntax highlighting
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

Quickly insert a block of elisp and shell
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")
	       '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC"))
#+END_SRC

** Window splitting
Split vertically by default
#+BEGIN_SRC emacs-lisp
  (setq split-height-threshold nil)
  (setq split-width-threshold 0)
#+END_SRC
* Calendar
#+BEGIN_SRC emacs-lisp
(setq calendar-week-start-day 1
calendar-latitude 103.886114
calendar-longitude 1.311787)
#+END_SRC

** Calendar events in =org-agenda=
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-include-diary t)
#+END_SRC

** TODO people birthday
** TODO public holidays
** TODO sunrise sunset
* Git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+END_SRC
** Follow symlink instead of prompting
To avoid message: Symbolic link to Git-controlled source file; follow link? (y or n)
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC
* Programming Languages
#+BEGIN_SRC emacs-lisp
(use-package flycheck :ensure t :pin melpa)
(use-package company :ensure t :pin melpa)
#+END_SRC
** Golang
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode "\\.go\\'"
    :interpreter "go")
  (use-package go-guru
    :after go-mode)
#+END_SRC
** Javascript
Tuto
https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html

All the conf comes from
https://github.com/CSRaghunandan/.emacs.d/blob/master/setup-files/setup-js.el
*** js2-mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :mode (("\\.js$" . js2-mode))
    :hook ((js2-mode . (lambda ()
			 (flycheck-mode)
			 (company-mode))))
    :config
    ;; use eslint_d instead of eslint for faster linting
    (setq flycheck-javascript-eslint-executable "eslint_d"))

  (use-package eslintd-fix)

#+END_SRC

*** js2-refactor
#+BEGIN_SRC emacs-lisp
  (use-package js2-refactor
    :after js2-mode
    :bind
    (:map js2-mode-map
	  ("C-k" . js2r-kill)
	  ("C-c h r" . js2-refactor-hydra/body))
    :hook ((js2-mode . js2-refactor-mode))
    :config (js2r-add-keybindings-with-prefix "C-c C-r")

    (defhydra js2-refactor-hydra (:color blue :hint nil)
      "
  ^Functions^                    ^Variables^               ^Buffer^                      ^sexp^               ^Debugging^
  ------------------------------------------------------------------------------------------------------------------------------
  [_lp_] Localize Parameter      [_ev_] Extract variable   [_wi_] Wrap buffer in IIFE    [_k_]  js2 kill      [_lt_] log this
  [_ef_] Extract function        [_iv_] Inline variable    [_ig_] Inject global in IIFE  [_ss_] split string  [_dt_] debug this
  [_ip_] Introduce parameter     [_rv_] Rename variable    [_ee_] Expand node at point   [_sl_] forward slurp
  [_em_] Extract method          [_vt_] Var to this        [_cc_] Contract node at point [_ba_] forward barf
  [_ao_] Arguments to object     [_sv_] Split var decl.    [_uw_] unwrap
  [_tf_] Toggle fun exp and decl [_ag_] Add var to globals
  [_ta_] Toggle fun expr and =>  [_ti_] Ternary to if
  [_q_]  quit"
      ("ee" js2r-expand-node-at-point)
      ("cc" js2r-contract-node-at-point)
      ("ef" js2r-extract-function)
      ("em" js2r-extract-method)
      ("tf" js2r-toggle-function-expression-and-declaration)
      ("ta" js2r-toggle-arrow-function-and-expression)
      ("ip" js2r-introduce-parameter)
      ("lp" js2r-localize-parameter)
      ("wi" js2r-wrap-buffer-in-iife)
      ("ig" js2r-inject-global-in-iife)
      ("ag" js2r-add-to-globals-annotation)
      ("ev" js2r-extract-var)
      ("iv" js2r-inline-var)
      ("rv" js2r-rename-var)
      ("vt" js2r-var-to-this)
      ("ao" js2r-arguments-to-object)
      ("ti" js2r-ternary-to-if)
      ("sv" js2r-split-var-declaration)
      ("ss" js2r-split-string)
      ("uw" js2r-unwrap)
      ("lt" js2r-log-this)
      ("dt" js2r-debug-this)
      ("sl" js2r-forward-slurp)
      ("ba" js2r-forward-barf)
      ("k" js2r-kill)
      ("q" nil)))
#+END_SRC

*** rjsx-mode
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :after js2-mode
    :mode ("\\.jsx$" . rjsx-mode)
    :hook (rjsx-mode . (lambda ()
			 (flycheck-mode)
			 (company-mode)
			 (js2-refactor-mode -1)))
  :config (unbind-key "C-c C-l" rjsx-mode-map))
#+END_SRC

*** json
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :config
    (add-hook 'json-mode-hook #'prettier-js-mode)
    (setq json-reformat:indent-width 2)
    (setq json-reformat:pretty-string? t)
    (setq js-indent-level 2))
#+END_SRC
*** Indium
debugging with browser by connecting emacs to a browser tab
* Keystroke optimisation
Replace 'yes' by 'y', 'no' by 'n' everywhere
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Kill current buffer without prompt
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC


